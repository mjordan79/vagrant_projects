# -*- mode: ruby -*-
# vi: set ft=ruby :

# Creates an environment with a variable number of nodes, each visible in the private subnetwork.
# Node 1 is supposed to be the master, the others are the workers.
# All the nodes are based on Ubuntu 22.04 LTS and the Hyper-V hypervisor.
# Requires the vagrant-hostmanager plugin:
# 	Install globally with: vagrant plugin install vagrant-hostmanager beforehand.

# For a static IP on Hyper-V, we also need to create an ad-hoc hyper-v virtual switch.
# Please read the Powershell script in ./scripts/create-nat-hyperv-switch.ps1
# Requires the vagrant-reload plugin:
#   Install globally with: vagrant plugin install vagrant-reload
# Otherwise it will be installed locally each time you create the environments.
# 
# IMPORTANT: When asked, choose the Default Switch as the network adapter. It will be switched automatically
# to LabSwitch after the first boot.

# Maintainer: Renato Perini <renato.perini@gmail.com>

Vagrant.require_version ">= 2.2.19"

# Provisioning stuff we don't want to put in the ./scripts/bash/provision.sh script.
$script = <<-SCRIPT
#!/usr/bin/env bash

echo "Updating neofetch ..."
curl -s https://raw.githubusercontent.com/dylanaraps/neofetch/master/neofetch -o /usr/bin/neofetch
chmod +x /usr/bin/neofetch
echo "neofetch --ascii_distro Ubuntu" | tee -a $HOME/.bash_profile | tee -a /home/vagrant/.bash_profile
echo "alias ls='ls --color'" | tee -a $HOME/.bashrc | tee -a /home/vagrant/.bashrc
echo "source ./.bashrc" | tee -a $HOME/.bash_profile
echo "Disabling SELinux ..."
setenforce 0
sed -i --follow-symlinks 's/SELINUX=permissive/SELINUX=disabled/g' /etc/selinux/config

SCRIPT

Vagrant.configure(2) do |config| 
	
	# Config parameters for the environments
	number_of_nodes = 1
	cpus_per_node = 16
	mem_per_node = 6144
	machine_name_prefix = "knode"
	regular_user = "user"
	regular_password = "user"
	root_password = "vagrant"
	enable_zsh = false
	enable_docker = false
	enable_java = true
	enable_gitea = false
	enable_nfs = false
	enable_synced_folder = false
	smb_user = ""
	smb_pass = ""
	
	# Require some plugins.
	config.vagrant.plugins = ["vagrant-hostmanager","vagrant-reload"]

	# Enable /etc/hosts handling automatically.
	if Vagrant.has_plugin?("vagrant-hostmanager")
		config.hostmanager.enabled = false
		config.hostmanager.manage_host = false
		config.hostmanager.manage_guest = true
		config.hostmanager.ignore_private_ip = true
		config.hostmanager.include_offline = true
    end

	# Define a start trigger.
	config.trigger.before :up do |trigger|
		trigger.info = "Creating 'LabSwitch' Hyper-V switch if it does not exist..."
		trigger.run = {
			privileged: "true", powershell_elevated_interactive: "true", path: "./scripts/powershell/create-nat-hyperv-switch.ps1"
		}
	end

	# Provision the nodes.
	(1..number_of_nodes).each do |i|
        config.vm.define "#{machine_name_prefix}_#{i}", primary: true do |node|
	    	node.vm.box = "generic/ubuntu2204"
	    	node.vm.hostname = "#{machine_name_prefix}#{i}"
	    	node.vm.provider "hyperv" do |hyperv|
	    		hyperv.enable_virtualization_extensions = true
        		hyperv.linked_clone = true
	    		hyperv.vmname = "#{machine_name_prefix}_#{i}"	
	    		hyperv.cpus = cpus_per_node
				hyperv.maxmemory = nil
	    		hyperv.memory = mem_per_node
	    	end
                    
	    	# Define a reload trigger.
	    	node.trigger.before :reload do |trigger|
	    		trigger.info = "Setting Hyper-V switch to 'LabSwitch' to allow for static IP..."
	    		trigger.run = {
	    			privileged: "true", powershell_elevated_interactive: "true", path: "./scripts/powershell/set-hyperv-switch.ps1", args: "#{machine_name_prefix}_#{i}"
	    		}
	    	end
    
	    	# Install basic software and update the distro.
			node.vm.provision "shell", path: "./scripts/bash/basic_software_provision.sh"
			# Install Docker
			if enable_docker == true then
	    		node.vm.provision "shell", path: "./scripts/bash/docker_provision.sh"
			end
			# Install ZSH, Oh-My-ZSH, Powerline10k, Dracula Theme for tmux
			if enable_zsh == true then
				node.vm.provision "shell", path: "./scripts/bash/zsh_provision.sh"
			end
            # Mixed actions, mostly unrelated to each other.
	    	node.vm.provision "shell", inline: $script
			# We want a normal user. With Bash or ZSH if available.
	    	node.vm.provision "shell", path: "./scripts/bash/add_sudo_user.sh" do |s|
	    		s.args = ["#{regular_user}", "#{regular_password}", "#{root_password}"]
	    	end
			# And we have to work with static IPs. We don't need IPV6.
	    	node.vm.provision "shell", path: "./scripts/bash/configure_static_ip.sh" do |s|
	        	s.args = "#{i}"
	    	end
				    			
	    	# Reload the machine.
	    	node.vm.provision :reload
            
			# Enable Java Development Kit (JDK 17 from the Eclipse Temurin Project)
			if enable_java == true then
                node.vm.provision "shell", path: "./scripts/bash/java_provision.sh"
			end

			# Provision NFS Server / Clients
			if enable_nfs == true then
                node.vm.provision "shell", path: "./scripts/bash/nfs_provision.sh" do |s|
					s.args = "#{i}"
				end
			end

			# Just configure the IPs
			node.vm.provision :hostmanager, run: 'always'

			# Provision the Gitea Git Server
			if enable_gitea == true then
				node.vm.provision "shell", path: "./scripts/bash/gitea_provision.sh" do |s|
					s.args = "#{i}"
				end
			end
	    	
			# Enable synced folder. Be sure to fill in the administrative username and password of your Windows account.
			if enable_synced_folder == true then
	    		node.vm.synced_folder "./#{machine_name_prefix}_#{i}", "/vagrant", create: true, type: "smb",
	    			smb_password: "#{smb_pass}", smb_username: "#{smb_user}"
	    	else
				# Or disable synced folder
				node.vm.synced_folder ".", "/vagrant", disabled: true	
			end
	    end		
	end
end
